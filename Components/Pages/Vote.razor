@page "/vote"
@using BlazorApp.Services
@rendermode InteractiveServer
@inject VotingService VotingService
@implements IDisposable

<PageTitle>Vote</PageTitle>

<div class="container">
    <h1>좋아하는 프로그래밍 언어는?</h1>
    
    <div class="vote-options">
        @foreach (var option in voteOptions)
        {
            <div class="vote-option">
                <h3>@option.Name</h3>
                <button class="btn btn-primary" @onclick="() => CastVote(option.Name)" disabled="@hasVoted">
                    투표하기
                </button>
            </div>
        }
    </div>

    <div class="results mt-4">
        <h2>투표 결과</h2>
        @foreach (var option in voteOptions)
        {
            var percentage = totalVotes > 0 ? (option.Votes * 100.0 / totalVotes) : 0;
            <div class="result-item">
                <div class="d-flex justify-content-between">
                    <span>@option.Name</span>
                    <span>@option.Votes 표 (@percentage.ToString("F1")%)</span>
                </div>
                <div class="progress">
                    <div class="progress-bar" role="progressbar" 
                         style="width: @percentage%"
                         aria-valuenow="@percentage" 
                         aria-valuemin="0" 
                         aria-valuemax="100">
                    </div>
                </div>
            </div>
        }
        
        <div class="mt-3">
            <p>전체 투표수: @totalVotes</p>
            @if (hasVoted)
            {
                <p class="text-success">투표해주셔서 감사합니다!</p>
            }
        </div>
    </div>
</div>

<style>
    .vote-options {
        display: grid;
        gap: 1rem;
        margin-bottom: 2rem;
    }

    .vote-option {
        padding: 1rem;
        border: 1px solid #ddd;
        border-radius: 4px;
    }

    .result-item {
        margin-bottom: 1rem;
    }

    .progress {
        height: 25px;
        margin-top: 0.5rem;
    }
</style>

@code {
    private IReadOnlyList<VotingService.VoteOption> voteOptions = new List<VotingService.VoteOption>();
    private bool hasVoted = false;
    private int totalVotes => voteOptions.Sum(o => o.Votes);

    protected override void OnInitialized()
    {
        voteOptions = VotingService.GetVoteOptions();
        VotingService.OnVotesUpdated += HandleVotesUpdated;
    }

    private async Task HandleVotesUpdated()
    {
        await InvokeAsync(StateHasChanged);
    }

    private async Task CastVote(string optionName)
    {
        if (!hasVoted)
        {
            await VotingService.CastVote(optionName);
            hasVoted = true;
        }
    }

    public void Dispose()
    {
        VotingService.OnVotesUpdated -= HandleVotesUpdated;
    }
} 